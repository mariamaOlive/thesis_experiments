from typing import Annotated
from semantic_kernel.functions.kernel_function_decorator import kernel_function

class PromptPlugin:
    def __init__(self, initial_instruction: str = ""):
        self.best_instruction: str = initial_instruction
        self.last_instruction: str = initial_instruction
        self.best_rouge_score: float = 0.0
        self.last_summary: str = ""

    @kernel_function(
        name="GetBestInstruction",
        description="Retrieve the best summarization instruction created so far by the Teacher."
    )
    async def get_best_instruction(self) -> Annotated[str, "Best instruction so far created so far by the Teacher"]:
        return self.best_instruction

    @kernel_function(
        name="GetBestInstructionRougeScore",
        description="Get the ROUGE score associated with the best instruction so far."
    )
    async def get_best_instruction_rouge_score(self) -> Annotated[float, "ROUGE score of best instruction"]:
        return self.best_rouge_score

    @kernel_function(
        name="GetLastSummary",
        description="Retrieve the most recent summary produced by the Summarizer."
    )
    async def get_last_summary(self) -> Annotated[str, "Most recent summary produced by the Summarizer"]:
        return self.last_summary

    @kernel_function(
        name="SetLastSummary",
        description="Set or update the most recent summary generated by the Summarizer."
    )
    async def set_last_summary(
        self,
        summary: Annotated[str, "The latest summary to store"]
    ):
        self.last_summary = summary

    @kernel_function(
        name="GetLastInstruction",
        description="Retrieve the most recent instruction proposed by the Teacher."
    )
    async def get_last_instruction(self) -> Annotated[str, "Last instruction proposed"]:
        return self.last_instruction

    @kernel_function(
        name="SetLastInstruction",
        description="Set or update the most recent instruction proposed by the Teacher."
    )
    async def set_last_instruction(
        self,
        instruction: Annotated[str, "Latest instruction to consider"]
    ):
        self.last_instruction = instruction

    @kernel_function(
        name="UpdateBestInstruction",
        description="Update the best instruction only if it achieves a higher ROUGE score."
    )
    async def update_best_instruction(
        self,
        new_instruction: Annotated[str, "Candidate instruction to evaluate"],
        rouge_score: Annotated[float, "ROUGE score of the candidate instruction"]
    ):
        if rouge_score > self.best_rouge_score:
            self.best_instruction = new_instruction
            self.best_rouge_score = rouge_score

